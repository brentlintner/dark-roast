// Generated by CoffeeScript 1.7.1
(function() {
  var async, child_process, coffee, coffeescript, compile, compile_cs, copy_file, file_ext, fs, handle_err, log, logger, path, wrench, _,
    __slice = [].slice;

  coffee = require('coffee-script');

  path = require('path');

  async = require('async');

  wrench = require('wrench');

  fs = require('fs');

  child_process = require('child_process');

  _ = require('underscore');

  logger = require('./logger');

  coffeescript = path.join(__dirname, '..', 'node_modules', '.bin', 'coffee');

  log = logger.create('dark-roast');

  file_ext = /\..*$/;

  handle_err = function(cb) {
    return function() {
      var args, err;
      err = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (err) {
        log.error(err);
        return process.exit(1);
      } else {
        return cb.apply(cb, args);
      }
    };
  };

  copy_file = function(cs_path, file_path, cb) {
    var coffee_file, coffee_path, full_path, write;
    full_path = path.join(process.cwd(), cs_path, file_path);
    coffee_path = full_path.replace(file_ext, '.coffee');
    coffee_file = fs.createWriteStream(coffee_path);
    write = fs.createReadStream(full_path);
    write.pipe(coffee_file);
    return write.on('end', cb);
  };

  compile_cs = function(cs_path, cs_opts, files) {
    _.each(files, function(file) {
      return log.info("compiling " + cs_path + "/" + file);
    });
    return child_process.exec("" + coffeescript + " " + cs_opts + " " + cs_path, handle_err(function(stdout, stderr) {
      process.stdout.write(stdout);
      process.stderr.write(stderr);
      return async.each(files, function(file_path, cb) {
        var coffee_path, full_path;
        full_path = path.join(process.cwd(), cs_path, file_path);
        coffee_path = full_path.replace(file_ext, '.coffee');
        return fs.unlink(coffee_path, handle_err(cb));
      }, handle_err);
    }));
  };

  compile = function(cs_path, cs_opts, opts) {
    var abs_path, custom_file_ext;
    abs_path = path.join(process.cwd(), cs_path);
    custom_file_ext = new RegExp("" + opts.blend + "$");
    return wrench.readdirRecursive(abs_path, handle_err(function(files) {
      if (!files) {
        return;
      }
      files = _.reject(files, function(file) {
        return fs.statSync(path.join(abs_path, file)).isDirectory() || !file.match(custom_file_ext);
      });
      return async.each(files, copy_file.bind(null, cs_path), handle_err(compile_cs.bind(null, cs_path, cs_opts, files)));
    }));
  };

  module.exports = {
    compile: compile
  };

}).call(this);
